{{ define "file" }}
package {{ .PackageName }}

import (
    "time"
)

{{ range .Schemas }}
{{ template "schema" . }}
{{ end }}
{{ end }}

{{ define "schema" }}
{{- if .Description -}}
{{ template "description" . }}
{{- end -}}
type {{ .Name }} {{ if eq .Type "struct" }}struct {
    {{- range .Properties -}}
    {{ template "field" . }}
    {{- end -}}
}{{- else if eq .Type "enum" -}}string

const (
    {{- range .EnumValues }}
    {{ $.Name }}{{ . | pascalCase }} {{ $.Name }} = "{{ . }}"
    {{- end -}}
){{- else -}}{{ .Type }}{{- end -}}
{{ end }}

{{ define "field" }}
{{- if .Description -}}
    {{ template "description" . }}
{{- end -}}
{{- if eq .Type "struct" }}
    {{ .Name }} struct {
        {{- range .Properties -}}
        {{ template "field" . }}
        {{- end -}}
    } `json:"{{ .JSONName }}{{ if .OmitEmpty }},omitempty{{ end }}"`
{{- else if eq .Type "array" -}}
    {{ .Name }} []{{ .ItemType }} `json:"{{ .JSONName }}{{ if .OmitEmpty }},omitempty{{ end }}"`
{{- else if eq .Type "enum" -}}
    // {{ .Name }} enum
    {{ .Name }} string `json:"{{ .JSONName }}{{ if .OmitEmpty }},omitempty{{ end }}"`
{{- else -}}
    {{ .Name }} {{ .Type }} `json:"{{ .JSONName }}{{ if .OmitEmpty }},omitempty{{ end }}"`
{{- end }}
{{ end }}

{{ define "description" }}
{{ goComment .Name .Description }}
{{ end }}
